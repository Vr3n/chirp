import { createServerSideHelpers } from "@trpc/react-query/server";
import { MoveLeft } from "lucide-react";
import superjson from "superjson";
import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { PageLayout } from "~/components/Layout";
import LoadingPage from "~/components/LoadingPage";
import PostView from "~/components/PostView";
import { appRouter } from "~/server/api/root";
import { api } from "~/utils/api";
import { prisma } from "~/server/db";

const PostDetailPage: NextPage<{ id: string }> = ({ id }) => {
  // start fetching asap.
  const { data, isLoading: postLoading } = api.posts.getPost.useQuery({
    id,
  });

  if (postLoading) return <LoadingPage />;

  if (!data) {
    return (
      <PageLayout>
        <h1 className="text-2xl">Post not found!</h1>
      </PageLayout>
    );
  }

  return (
    <>
      <Head>
        <title>Chirp | Post</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <header className="py-2">
          <nav className="ml-4 flex items-center gap-8">
            <Link href="/">
              <MoveLeft size={18} />
            </Link>
            <h2 className="text-xl">Chirp</h2>
          </nav>
        </header>
        <PostView {...data} />
      </PageLayout>
    </>
  );
};

export const getStaticProps: GetStaticProps = async (context) => {
  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, userId: null },
    transformer: superjson,
  });

  const id = context.params?.id;

  if (typeof id !== "string") throw new Error("No id");

  await helpers.posts.getPost.prefetch({ id });

  return {
    props: {
      trpcState: helpers.dehydrate(),
      id,
    },
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

export default PostDetailPage;
