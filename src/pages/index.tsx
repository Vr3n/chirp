import { SignInButton, useUser } from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";
import { type RouterOutputs, api } from "~/utils/api";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import Image from "next/image";
import LoadingPage from "~/components/LoadingPage";
import { useState } from "react";
import LoadingSpinner from "~/components/LoadingSpinner";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const { user } = useUser();

  const ctx = api.useContext();

  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.posts.getAll.invalidate();
    },
  });
  const [input, setInput] = useState<string>("");

  if (!user) return null;

  return (
    <div className="flex w-full gap-3">
      <Image
        src={user.profileImageUrl}
        alt="profile_picture"
        className="h-12 w-12 rounded-full"
        height={56}
        width={56}
      />
      <input
        type="text"
        placeholder="what's in your mind?"
        className="w-full rounded-md bg-transparent outline-none"
        value={input}
        disabled={isPosting}
        onChange={(e) => setInput(e.target.value)}
      />
      <button onClick={() => mutate({ content: input })} disabled={isPosting}>
        {isPosting ? <LoadingSpinner size={6} /> : "Post"}
      </button>
    </div>
  );
};

type PostWithUser = RouterOutputs["posts"]["getAll"][number];

const PostView = (props: PostWithUser) => {
  const { post, author } = props;
  return (
    <div className="flex gap-4 border-b border-slate-400 p-6">
      <Image
        src={author.profileImageUrl}
        alt="profile_picture"
        className="h-12 w-12 rounded-full"
        height={56}
        width={56}
      />
      <span className="flex flex-col gap-3">
        <span className="flex items-center gap-2">
          <p className="text-slate-400">{author.fullName}</p>Â·
          <span className="text-sm text-slate-400">{`${dayjs(
            post.createdAt
          ).fromNow()}`}</span>
        </span>
        <article key={post.id}>{post.content}</article>
      </span>
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: postsLoaded } = api.posts.getAll.useQuery();

  if (!!postsLoaded) return <LoadingPage />;

  if (!data) return <div>Something went wrong!</div>;

  return (
    <section className="flex flex-col">
      {data?.map((fullPost) => (
        <PostView {...fullPost} key={fullPost?.post.id} />
      ))}
    </section>
  );
};

const Home: NextPage = () => {
  const { isSignedIn: isUserSignedIn, isLoaded: usersLoaded } = useUser();
  api.posts.getAll.useQuery();

  if (!usersLoaded) return <LoadingPage />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center border-slate-400">
        <section className="w-full border-x md:max-w-2xl">
          <header className="w-full border-b border-slate-400 p-6">
            <nav>
              <div>{!isUserSignedIn && <SignInButton />}</div>
              <div>{!!isUserSignedIn && <CreatePostWizard />}</div>
            </nav>
          </header>
          <Feed />
        </section>
      </main>
    </>
  );
};

export default Home;
